#include <iostream>
#include <sstream>
#include <cmath>
#include <fstream>

using namespace std;

class matrix_t {
public:
	int ** data;
	unsigned int rows;
	unsigned int columns;
	matrix_t() {
		data = nullptr;
		rows = 0;
		columns = 0;
	}
  

/*bool read(float ** &matrix, unsigned int &rows, unsigned int &columns)
{
    bool result = true;
    char zap;
    string string, string1;
    getline(cin, string);
    istringstream stream(string);
    if (stream >> rows && stream >> zap && zap == ',' && stream >> columns) {
        result = true;
    }
    else return false;
    matrix = new float *[rows];
    for (unsigned int i = 0; i < rows; ++i) {
        matrix[i] = new float[columns];
        getline(cin, string1);
        istringstream stream(string1);
        for (unsigned int j = 0; j < columns; j++) {
            if (!(stream >> matrix[i][j])) {
                result = false;
                break;
            }
        }
    }
    return result;
}
*/



std::ofstream & write( std::ofstream & stream ) {
    stream << endl;
    for (unsigned int i = 0; i < rows; i++) {
        for (unsigned int j = 0; j < columns; j++) {
            if (elements[i][j] == -0) {
                stream << 0 << " ";
            }
            else {
                stream << elements[i][j] << " ";
            }
        }
        stream << endl;
    }
}

matrix_t add(matrix_t & other) const {
		if (this->rows==other.rows && this->columns==other.columns){
			for(int i=0; i<this->rows; ++i){
				for(int j= 0; j<this->columns; ++j){
					other.data[i][j]=this->data[i][j]+other.data[i][j];
				}
			}
		}
    else {
			cerr << "Error";
		}
		return other;
	}

matrix_t sub(matrix_t & other) const {
		if(this->rows==other.rows && this->columns==other.columns){
			for(int i=0; i<this->rows; ++i){
				for(int j=0; j<this->columns; ++j){
					other.data[i][j]=this->data[i][j]-other.data[i][j];
				}
			}
		}
    else {
			cerr << "Error";
		}
		return other;
	}




matrix_t mul(matrix_t & other) const {
		matrix_t result;
		if(this->columns==other.rows){
			result.rows=this->rows;
			result.columns=other.columns;
			result.data=new int *[this->rows];
			for(int i=0; i<this->rows; ++i){
				result.data[i]=new int[other.columns];
			}
			for(int i=0; i<this->rows; ++i){
				for(int j=0; j<other.columns; ++j){
					int sum=0;
					for(int k=0; k<other.rows; ++k) {
						sum+=this->data[i][k]*other.data[k][j];
					}
					result.data[i][j] = sum;
				}
			}
		}
   else {
			cerr << "Error";
		}
		return result;
	}

matrix_t trans(matrix_t & other) const {
		other.rows=this->columns;
		other.columns=this->rows;
		other.data=new int *[other.rows];
		for(int i=0; i<this->columns; ++i){
			other.data[i]=new int [other.columns];
		}
		for(int i=0; i<other.rows; ++i){
			for(int j=0; j<other.columns; ++j){
				other.data[i][j]=this->data[j][i];
			}
		}
		return other;
	}


std::ifstream & read( std::ifstream & stream ) {
    float** matrix = nullptr;
    char op;
    ifstream input;
    input.open(FileName.c_str());
    if ( input.is_open() ) {
        string  string;
        getline(input,  string);
        istringstream stream( string);
        if (stream >> rows && stream >> op && op == ',' && stream >> columns) {
            matrix = create(matrix, rows, columns);
            for (unsigned int i = 0; i < rows; i++) {
                for (unsigned int j = 0; j < columns; j++) {
                    input >> matrix[i][j];
                }
            }
        }
    }
    else {
        cerr << "Error";
        return nullptr;
    }
    input.close();
    return matrix;
}

bool readFileName(string &fileName) {
    bool result = true;
    string string;
    getline(cin, string);
    istringstream stream(string);
    if (!(stream >> fileName)) {
        result = !result;
    }
    return result;
}
};


int main() {
    unsigned int rows1 = 0, rows2 = 0, columns1 = 0, columns2 = 0;
    char op;
    string fileName1, fileName2;
    float ** matrix1 = new float *[rows1];
    float ** matrix;
    if (readFileName(fileName1)) {
        matrix1 = rewritefromfile(rows1, columns1, fileName1);
        cin >> op;
        if (op == 'T') {
            write(cout, trans(matrix1, matrix, rows1, columns1), columns1, rows1);
        }
        else if (rows1 == columns1 && (op == '-' || op == '+' || op == '*')) {
                        cin.get();
                        float ** matrix2 = new float *[rows2];
                        if (readFileName(fileName2)) {
                        matrix2 = rewritefromfile(rows2, columns2, fileName2);
                        if (rows1 == rows2 && columns1 == columns2) {
                        switch (op) {
                        case '+': {
                            write(cout, add(matrix1, matrix2, matrix, rows1, columns1), rows1, columns1);
                            break;
                        }
                        case '-': {
                            write(cout, sub(matrix1, matrix2, matrix, rows1, columns1), rows1, columns1);
                            break;
                        }
                        case '*': {
                            write(cout, mult(matrix1, matrix2, matrix, rows1, columns1), rows1, columns1);
                            break;
                        }
                        default:
                        cerr << "An error has occured while reading input data";
                    }
                destroy(matrix2, rows1);
                }
            }
            else cerr << "An error has occured while reading input data";
        }
        else cerr << "An error has occured while reading input data";
    }
    else cerr << "An error has occured while reading input data";
    destroy(matrix1, rows1);
}

#include <iostream>
#include <sstream>
#include <cmath>
#include <fstream>

using namespace std;

class matrix_t {
public:
	int ** data;
	unsigned int rows;
	unsigned int columns;
	matrix_t() {
		data = nullptr;
		rows = 0;
		columns = 0;
	} 

matrix_t add(matrix_t const & other) const {
        matrix_t result;
		if (this->rows==other.rows && this->columns==other.columns) {
		    result.rows=this->rows;
			result.columns=this->columns;
			result.data=new int *[this->rows];
			for(int i=0; i<this->rows; ++i) {
			    result.data[i]=new int[this->columns];
			}
			for(int i=0; i<this->rows; ++i) {
				for(int j= 0; j<this->columns; ++j) {
			    	result.data[i][j]=this->data[i][j]+other.data[i][j];
				}
			}
		}
    else {
			cerr << "Error";
		}
		return result;
   }

matrix_t sub(matrix_t const & other) const {
    	matrix_t result;
		if (this->rows==other.rows && this->columns==other.columns) {
		    result.rows=this->rows;
			result.columns=this->columns;
			result.data=new int *[this->rows];
			for(int i=0; i<this->rows; ++i) {
			    result.data[i]=new int[this->columns];
			}
			for(int i=0; i<this->rows; ++i) {
				for(int j= 0; j<this->columns; ++j) {
			    	result.data[i][j]=this->data[i][j]-other.data[i][j];
				}
			}
		}
    else {
			cerr << "Error";
		}
		return result;
   }

matrix_t mul(matrix_t const & other) const {
	matrix_t result;
	if(this->columns==other.rows) {
		result.rows=this->rows;
		result.columns=other.columns;
		result.data=new int *[this->rows];
		for(int i=0; i<this->rows; ++i) {
			result.data[i]=new int[other.columns];
		}
		for(int i=0; i<this->rows; ++i) {
			for(int j=0; j<other.columns; ++j) {
				int sum=0;
				for(int k=0; k<other.rows; ++k) {
					sum+=this->data[i][k]*other.data[k][j];
				}
				result.data[i][j] = sum;
			        }
		        }
	        }
   else {
			cerr << "Error";
	        }
	        return result;
   }

matrix_t trans(matrix_t const & other) const {
        matrix_t result;
		result.rows=other.columns;
		result.columns=other.rows;
		result.data=new int *[other.rows];
		for(int i=0; i<other.columns; ++i) {
			result.data[i]=new int [other.columns];
		}
		for(int i=0; i<other.rows; ++i) {
			for(int j=0; j<other.columns; ++j) {
				result.data[i][j]=other.data[j][i];
			}
		}
		return result;
	}

std::ifstream & read(std::ifstream & stream, std::string FileName) {
    char op;
    stream.open(FileName.c_str());
    if ( stream.is_open() ) {
        string  string;
        getline(stream,  string);
        istringstream stream( string);
        if (stream >> rows && stream >> op && op == ',' && stream >> columns) {
          data=new int *[rows];
            for (unsigned int i = 0; i < rows; i++) {
                data[i]=new int[columns];
                for (unsigned int j = 0; j < columns; j++) {
                   stream>>data[i][j];
                }
            }
        }
    }
    else {
        cerr << "Error";
    }
    stream.close();
    return stream;
}

std::ofstream & write(std::ofstream & stream, std::string FileName) const {
    stream << endl;
    for (unsigned int i = 0; i < rows; i++) {
        for (unsigned int j = 0; j < columns; j++) {
            if (data[i][j] == -0) {
                stream << 0 << " ";
            }
            else {
                stream << data[i][j] << " ";
            }
        }
        stream << endl;
    }
}
};

bool readFileName(string &fileName) {
    bool result = true;
    string string;
    getline(cin, string);
    istringstream stream(string);
    if (!(stream >> fileName)) {
        result = !result;
    }
    return result;
}


int main() {
	matrix_t matrix1, matrix2, matrix3;
	char op;
	string fileName1, fileName2, fileName3="res.txt";
	ifstream stream1, stream2;
	ofstream stream3;
	if (readFileName(fileName1)) {
		matrix1.read(stream1, fileName1);
		cin >> op;
		cin.get();
        if (op == 'T') {
           matrix3 = matrix1.trans(matrix3);
		   matrix3.write(stream3, fileName3);
        }
        else if (matrix1.rows == matrix1.columns && (op == '-' || op == '+' || op == '*')) {
                cin.get();
                if (readFileName(fileName2)) {
                        matrix2.read(stream2, fileName2);
                        if (matrix1.rows == matrix2.rows && matrix1.columns == matrix2.columns) {
                        switch (op) {
                        case '+': {
		                matrix3 = matrix1.add(matrix2);
			        matrix3.write(stream3, fileName3);
				break;
		       }
		       case '-': {
			       matrix3 = matrix1.sub(matrix2);
			       matrix3.write(stream3, fileName3);
			       break;
		       }
		       case '*': {
			       matrix3 = matrix1.mul(matrix2);
			       matrix3.write(stream3, fileName3);
			       break;
		       }
                       default:
                              cerr << "An error has occured while reading input data";
                       }
                  }
            }
            else cerr << "An error has occured while reading input data";
        }
        else cerr << "An error has occured while reading input data";
    }
    else cerr << "An error has occured while reading input data";
    cin.get();
}
